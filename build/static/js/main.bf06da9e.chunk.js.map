{"version":3,"sources":["pages/LoginPage/index.jsx","pages/HomePage/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["layout","labelCol","span","wrapperCol","tailLayout","offset","LoginPage","props","onFinish","values","onLoginSuccess","console","log","username","password","alert","onFinishFailed","errorInfo","state","this","className","title","extra","onClick","style","width","name","initialValues","remember","Item","label","rules","required","message","Password","valuePropName","type","htmlType","Component","HomePage","gotoBaidu","window","location","href","App","setState","isLogin","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"oWAIMA,G,OAAS,CACbC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,MAEhBE,EAAa,CACjBD,WAAY,CAAEE,OAAQ,EAAGH,KAAM,KA2ElBI,E,kDAvEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAKRC,SAAW,SAAAC,GAAW,IACZC,EAAmB,EAAKH,MAAxBG,eACRC,QAAQC,IAAI,EAAKL,OACjBI,QAAQC,IAAI,WAAYH,GACA,WAApBA,EAAOI,UAA6C,aAApBJ,EAAOK,UACzCC,MAAM,4BACNL,KAEAK,MAAM,qDAdS,EAkBnBC,eAAiB,SAAAC,GACfN,QAAQC,IAAI,UAAWK,IAjBvB,EAAKC,MAAQ,GAFI,E,qDAsBT,IACAV,EAA6BW,KAA7BX,SAAUQ,EAAmBG,KAAnBH,eAElB,OACE,yBAAKI,UAAU,cACb,yBAAKA,UAAU,mBACb,kBAAC,IAAD,CAAMC,MAAM,eAAKC,MAAO,yBAAKC,QAAS,WAAOR,MAAM,sGAA3B,gBAEhBS,MAAO,CAAEC,MAAO,MACtB,kBAAC,IAAD,iBACMzB,EADN,CAEE0B,KAAK,QACLC,cAAe,CAAEC,UAAU,GAC3BpB,SAAUA,EACVQ,eAAgBA,IAEhB,kBAAC,IAAKa,KAAN,CACEC,MAAM,qBACNJ,KAAK,WACLK,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCAEnC,kBAAC,IAAD,OAGF,kBAAC,IAAKJ,KAAN,CACEC,MAAM,eACNJ,KAAK,WACLK,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCAEnC,kBAAC,IAAMC,SAAP,OAGF,kBAAC,IAAKL,KAAN,iBAAezB,EAAf,CAA2BsB,KAAK,WAAWS,cAAc,YACvD,kBAAC,IAAD,4BAGF,kBAAC,IAAKN,KAASzB,EACb,kBAAC,IAAD,CAAQgC,KAAK,UAAUC,SAAS,UAAhC,mB,GA5DQC,aCcTC,G,yDAtBb,WAAYhC,GAAQ,IAAD,8BACjB,cAAMA,IAKRiC,UAAY,WACVC,OAAOC,SAASC,KAAO,yBALvB,EAAKzB,MAAQ,GAFI,E,qDAYjB,OACI,6BACI,yBAAKE,UAAU,QAAf,sDACA,yBAAKA,UAAU,QAAf,0GACA,yBAAKA,UAAU,OAAOG,QAASJ,KAAKqB,WAApC,+D,GAjBWF,cCyBRM,G,yDAtBb,WAAYrC,GAAQ,IAAD,8BACjB,cAAMA,IAMRG,eAAiB,WACf,EAAKmC,SAAS,CACZC,SAAS,KAPX,EAAK5B,MAAQ,CACX4B,SAAS,GAHM,E,qDAgBjB,OAFoB3B,KAAKD,MAAjB4B,QAGI,kBAAC,EAAD,MAAe,kBAAC,EAAD,CAAWpC,eAAgBS,KAAKT,qB,GAlB7C4B,cCOES,QACW,cAA7BN,OAAOC,SAASM,UAEe,UAA7BP,OAAOC,SAASM,UAEhBP,OAAOC,SAASM,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAM7B,c","file":"static/js/main.bf06da9e.chunk.js","sourcesContent":["import React, { Component }  from 'react';\nimport { Form, Input, Button, Checkbox, Card } from 'antd';\nimport './index.less';\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\nclass LoginPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    }\n  }\n\n  onFinish = values => {\n    const { onLoginSuccess } = this.props;\n    console.log(this.props);\n    console.log('Success:', values);\n    if (values.username === 'hahaha' && values.password === '20201023') {\n      alert('登陆成功');\n      onLoginSuccess();\n    } else {\n      alert('密码或用户名错误');\n    }\n  };\n\n  onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };  \n\n  render() {\n    const { onFinish, onFinishFailed } = this;\n\n    return (\n      <div className=\"login-page\">\n        <div className=\"login-page-card\">\n          <Card title=\"登陆\" extra={<div onClick={() => {alert('现在还注册不了，想要账号请找本人')}}>\n            注册\n          </div>} style={{ width: 300 }}>\n            <Form\n              {...layout}\n              name=\"basic\"\n              initialValues={{ remember: true }}\n              onFinish={onFinish}\n              onFinishFailed={onFinishFailed}\n            >\n              <Form.Item\n                label=\"用户名\"\n                name=\"username\"\n                rules={[{ required: true, message: 'Please input your username!' }]}\n              >\n                <Input />\n              </Form.Item>\n\n              <Form.Item\n                label=\"密码\"\n                name=\"password\"\n                rules={[{ required: true, message: 'Please input your password!' }]}\n              >\n                <Input.Password />\n              </Form.Item>\n\n              <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\n                <Checkbox>记住我</Checkbox>\n              </Form.Item>\n\n              <Form.Item {...tailLayout}>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  Submit\n                </Button>\n              </Form.Item>\n            </Form>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LoginPage;\n","import React, { Component }  from 'react';\nimport './index.css';\n\nclass HomePage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    }\n  }\n\n  gotoBaidu = () => {\n    window.location.href = 'https://www.baidu.com';\n  }\n\n  render() {\n    \n    return (   \n        <div>\n            <div className=\"note\">欢迎进入FA监控平台</div>\n            <div className=\"note\">不过，仍在开发中。。。现在啥也还没</div>\n            <div className=\"note\" onClick={this.gotoBaidu}>百度以下，你就知道</div>\n        </div>\n    );\n  }\n}\n\nexport default HomePage;","import React, { Component }  from 'react';\nimport LoginPage from './pages/LoginPage';\nimport HomePage from './pages/HomePage';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLogin: false\n    }\n  }\n\n  onLoginSuccess = () => {\n    this.setState({\n      isLogin: true\n    })\n  }\n\n  render() {\n    const { isLogin } = this.state;\n    \n    return (\n      isLogin ? <HomePage /> : <LoginPage onLoginSuccess={this.onLoginSuccess} />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}