{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _routerWarning = require('./routerWarning');\n\nvar _routerWarning2 = _interopRequireDefault(_routerWarning);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar object = _react2.default.PropTypes.object;\n/**\n * The Lifecycle mixin adds the routerWillLeave lifecycle method to a\n * component that may be used to cancel a transition or prompt the user\n * for confirmation.\n *\n * On standard transitions, routerWillLeave receives a single argument: the\n * location we're transitioning to. To cancel the transition, return false.\n * To prompt the user for confirmation, return a prompt message (string).\n *\n * During the beforeunload event (assuming you're using the useBeforeUnload\n * history enhancer), routerWillLeave does not receive a location object\n * because it isn't possible for us to know the location we're transitioning\n * to. In this case routerWillLeave must return a prompt message to prevent\n * the user from closing the window/tab.\n */\n\nvar Lifecycle = {\n  contextTypes: {\n    history: object.isRequired,\n    // Nested children receive the route as context, either\n    // set by the route component using the RouteContext mixin\n    // or by some other ancestor.\n    route: object\n  },\n  propTypes: {\n    // Route components receive the route object as a prop.\n    route: object\n  },\n  componentDidMount: function componentDidMount() {\n    process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'the `Lifecycle` mixin is deprecated, please use `context.router.setRouteLeaveHook(route, hook)`. http://tiny.cc/router-lifecyclemixin') : void 0;\n    !this.routerWillLeave ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'The Lifecycle mixin requires you to define a routerWillLeave method') : (0, _invariant2.default)(false) : void 0;\n    var route = this.props.route || this.context.route;\n    !route ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'The Lifecycle mixin must be used on either a) a <Route component> or ' + 'b) a descendant of a <Route component> that uses the RouteContext mixin') : (0, _invariant2.default)(false) : void 0;\n    this._unlistenBeforeLeavingRoute = this.context.history.listenBeforeLeavingRoute(route, this.routerWillLeave);\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    if (this._unlistenBeforeLeavingRoute) this._unlistenBeforeLeavingRoute();\n  }\n};\nexports.default = Lifecycle;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/Users/bytedance/Desktop/outside_workspace/sky_tower_fe/sky_tower_fe/node_modules/react-router/lib/Lifecycle.js"],"names":["exports","__esModule","_routerWarning","require","_routerWarning2","_interopRequireDefault","_react","_react2","_invariant","_invariant2","obj","default","object","PropTypes","Lifecycle","contextTypes","history","isRequired","route","propTypes","componentDidMount","process","env","NODE_ENV","routerWillLeave","props","context","_unlistenBeforeLeavingRoute","listenBeforeLeavingRoute","componentWillUnmount","module"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;;AAEA,IAAIC,cAAc,GAAGC,OAAO,CAAC,iBAAD,CAA5B;;AAEA,IAAIC,eAAe,GAAGC,sBAAsB,CAACH,cAAD,CAA5C;;AAEA,IAAII,MAAM,GAAGH,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAII,OAAO,GAAGF,sBAAsB,CAACC,MAAD,CAApC;;AAEA,IAAIE,UAAU,GAAGL,OAAO,CAAC,WAAD,CAAxB;;AAEA,IAAIM,WAAW,GAAGJ,sBAAsB,CAACG,UAAD,CAAxC;;AAEA,SAASH,sBAAT,CAAgCK,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACT,UAAX,GAAwBS,GAAxB,GAA8B;AAAEC,IAAAA,OAAO,EAAED;AAAX,GAArC;AAAwD;;AAE/F,IAAIE,MAAM,GAAGL,OAAO,CAACI,OAAR,CAAgBE,SAAhB,CAA0BD,MAAvC;AAEA;;;;;;;;;;;;;;;;AAgBA,IAAIE,SAAS,GAAG;AAEdC,EAAAA,YAAY,EAAE;AACZC,IAAAA,OAAO,EAAEJ,MAAM,CAACK,UADJ;AAEZ;AACA;AACA;AACAC,IAAAA,KAAK,EAAEN;AALK,GAFA;AAUdO,EAAAA,SAAS,EAAE;AACT;AACAD,IAAAA,KAAK,EAAEN;AAFE,GAVG;AAedQ,EAAAA,iBAAiB,EAAE,SAASA,iBAAT,GAA6B;AAC9CC,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,CAAC,GAAGnB,eAAe,CAACO,OAApB,EAA6B,KAA7B,EAAoC,uIAApC,CAAxC,GAAuN,KAAK,CAA5N;AACA,KAAC,KAAKa,eAAN,GAAwBH,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,CAAC,GAAGd,WAAW,CAACE,OAAhB,EAAyB,KAAzB,EAAgC,qEAAhC,CAAxC,GAAiJ,CAAC,GAAGF,WAAW,CAACE,OAAhB,EAAyB,KAAzB,CAAzK,GAA2M,KAAK,CAAhN;AAEA,QAAIO,KAAK,GAAG,KAAKO,KAAL,CAAWP,KAAX,IAAoB,KAAKQ,OAAL,CAAaR,KAA7C;AAEA,KAACA,KAAD,GAASG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,CAAC,GAAGd,WAAW,CAACE,OAAhB,EAAyB,KAAzB,EAAgC,0EAA0E,yEAA1G,CAAxC,GAA+N,CAAC,GAAGF,WAAW,CAACE,OAAhB,EAAyB,KAAzB,CAAxO,GAA0Q,KAAK,CAA/Q;AAEA,SAAKgB,2BAAL,GAAmC,KAAKD,OAAL,CAAaV,OAAb,CAAqBY,wBAArB,CAA8CV,KAA9C,EAAqD,KAAKM,eAA1D,CAAnC;AACD,GAxBa;AAyBdK,EAAAA,oBAAoB,EAAE,SAASA,oBAAT,GAAgC;AACpD,QAAI,KAAKF,2BAAT,EAAsC,KAAKA,2BAAL;AACvC;AA3Ba,CAAhB;AA8BA3B,OAAO,CAACW,OAAR,GAAkBG,SAAlB;AACAgB,MAAM,CAAC9B,OAAP,GAAiBA,OAAO,CAAC,SAAD,CAAxB","sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nvar _routerWarning = require('./routerWarning');\n\nvar _routerWarning2 = _interopRequireDefault(_routerWarning);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar object = _react2.default.PropTypes.object;\n\n/**\n * The Lifecycle mixin adds the routerWillLeave lifecycle method to a\n * component that may be used to cancel a transition or prompt the user\n * for confirmation.\n *\n * On standard transitions, routerWillLeave receives a single argument: the\n * location we're transitioning to. To cancel the transition, return false.\n * To prompt the user for confirmation, return a prompt message (string).\n *\n * During the beforeunload event (assuming you're using the useBeforeUnload\n * history enhancer), routerWillLeave does not receive a location object\n * because it isn't possible for us to know the location we're transitioning\n * to. In this case routerWillLeave must return a prompt message to prevent\n * the user from closing the window/tab.\n */\n\nvar Lifecycle = {\n\n  contextTypes: {\n    history: object.isRequired,\n    // Nested children receive the route as context, either\n    // set by the route component using the RouteContext mixin\n    // or by some other ancestor.\n    route: object\n  },\n\n  propTypes: {\n    // Route components receive the route object as a prop.\n    route: object\n  },\n\n  componentDidMount: function componentDidMount() {\n    process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'the `Lifecycle` mixin is deprecated, please use `context.router.setRouteLeaveHook(route, hook)`. http://tiny.cc/router-lifecyclemixin') : void 0;\n    !this.routerWillLeave ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'The Lifecycle mixin requires you to define a routerWillLeave method') : (0, _invariant2.default)(false) : void 0;\n\n    var route = this.props.route || this.context.route;\n\n    !route ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'The Lifecycle mixin must be used on either a) a <Route component> or ' + 'b) a descendant of a <Route component> that uses the RouteContext mixin') : (0, _invariant2.default)(false) : void 0;\n\n    this._unlistenBeforeLeavingRoute = this.context.history.listenBeforeLeavingRoute(route, this.routerWillLeave);\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    if (this._unlistenBeforeLeavingRoute) this._unlistenBeforeLeavingRoute();\n  }\n};\n\nexports.default = Lifecycle;\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}