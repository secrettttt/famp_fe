{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nvar _slice = Array.prototype.slice;\nexports.loopAsync = loopAsync;\n\nfunction loopAsync(turns, work, callback) {\n  var currentTurn = 0,\n      isDone = false;\n  var sync = false,\n      hasNext = false,\n      doneArgs = undefined;\n\n  function done() {\n    isDone = true;\n\n    if (sync) {\n      // Iterate instead of recursing if possible.\n      doneArgs = [].concat(_slice.call(arguments));\n      return;\n    }\n\n    callback.apply(this, arguments);\n  }\n\n  function next() {\n    if (isDone) {\n      return;\n    }\n\n    hasNext = true;\n\n    if (sync) {\n      // Iterate instead of recursing if possible.\n      return;\n    }\n\n    sync = true;\n\n    while (!isDone && currentTurn < turns && hasNext) {\n      hasNext = false;\n      work.call(this, currentTurn++, next, done);\n    }\n\n    sync = false;\n\n    if (isDone) {\n      // This means the loop finished synchronously.\n      callback.apply(this, doneArgs);\n      return;\n    }\n\n    if (currentTurn >= turns && hasNext) {\n      isDone = true;\n      callback();\n    }\n  }\n\n  next();\n}","map":{"version":3,"sources":["/Users/bytedance/Desktop/outside_workspace/sky_tower_fe/sky_tower_fe/node_modules/history/lib/AsyncUtils.js"],"names":["exports","__esModule","_slice","Array","prototype","slice","loopAsync","turns","work","callback","currentTurn","isDone","sync","hasNext","doneArgs","undefined","done","concat","call","arguments","apply","next"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACA,IAAIC,MAAM,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAA7B;AACAL,OAAO,CAACM,SAAR,GAAoBA,SAApB;;AAEA,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,IAA1B,EAAgCC,QAAhC,EAA0C;AACxC,MAAIC,WAAW,GAAG,CAAlB;AAAA,MACIC,MAAM,GAAG,KADb;AAEA,MAAIC,IAAI,GAAG,KAAX;AAAA,MACIC,OAAO,GAAG,KADd;AAAA,MAEIC,QAAQ,GAAGC,SAFf;;AAIA,WAASC,IAAT,GAAgB;AACdL,IAAAA,MAAM,GAAG,IAAT;;AACA,QAAIC,IAAJ,EAAU;AACR;AACAE,MAAAA,QAAQ,GAAG,GAAGG,MAAH,CAAUf,MAAM,CAACgB,IAAP,CAAYC,SAAZ,CAAV,CAAX;AACA;AACD;;AAEDV,IAAAA,QAAQ,CAACW,KAAT,CAAe,IAAf,EAAqBD,SAArB;AACD;;AAED,WAASE,IAAT,GAAgB;AACd,QAAIV,MAAJ,EAAY;AACV;AACD;;AAEDE,IAAAA,OAAO,GAAG,IAAV;;AACA,QAAID,IAAJ,EAAU;AACR;AACA;AACD;;AAEDA,IAAAA,IAAI,GAAG,IAAP;;AAEA,WAAO,CAACD,MAAD,IAAWD,WAAW,GAAGH,KAAzB,IAAkCM,OAAzC,EAAkD;AAChDA,MAAAA,OAAO,GAAG,KAAV;AACAL,MAAAA,IAAI,CAACU,IAAL,CAAU,IAAV,EAAgBR,WAAW,EAA3B,EAA+BW,IAA/B,EAAqCL,IAArC;AACD;;AAEDJ,IAAAA,IAAI,GAAG,KAAP;;AAEA,QAAID,MAAJ,EAAY;AACV;AACAF,MAAAA,QAAQ,CAACW,KAAT,CAAe,IAAf,EAAqBN,QAArB;AACA;AACD;;AAED,QAAIJ,WAAW,IAAIH,KAAf,IAAwBM,OAA5B,EAAqC;AACnCF,MAAAA,MAAM,GAAG,IAAT;AACAF,MAAAA,QAAQ;AACT;AACF;;AAEDY,EAAAA,IAAI;AACL","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nvar _slice = Array.prototype.slice;\nexports.loopAsync = loopAsync;\n\nfunction loopAsync(turns, work, callback) {\n  var currentTurn = 0,\n      isDone = false;\n  var sync = false,\n      hasNext = false,\n      doneArgs = undefined;\n\n  function done() {\n    isDone = true;\n    if (sync) {\n      // Iterate instead of recursing if possible.\n      doneArgs = [].concat(_slice.call(arguments));\n      return;\n    }\n\n    callback.apply(this, arguments);\n  }\n\n  function next() {\n    if (isDone) {\n      return;\n    }\n\n    hasNext = true;\n    if (sync) {\n      // Iterate instead of recursing if possible.\n      return;\n    }\n\n    sync = true;\n\n    while (!isDone && currentTurn < turns && hasNext) {\n      hasNext = false;\n      work.call(this, currentTurn++, next, done);\n    }\n\n    sync = false;\n\n    if (isDone) {\n      // This means the loop finished synchronously.\n      callback.apply(this, doneArgs);\n      return;\n    }\n\n    if (currentTurn >= turns && hasNext) {\n      isDone = true;\n      callback();\n    }\n  }\n\n  next();\n}"]},"metadata":{},"sourceType":"script"}