{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _PatternUtils = require('./PatternUtils');\n\nfunction routeParamsChanged(route, prevState, nextState) {\n  if (!route.path) return false;\n  var paramNames = (0, _PatternUtils.getParamNames)(route.path);\n  return paramNames.some(function (paramName) {\n    return prevState.params[paramName] !== nextState.params[paramName];\n  });\n}\n/**\n * Returns an object of { leaveRoutes, changeRoutes, enterRoutes } determined by\n * the change from prevState to nextState. We leave routes if either\n * 1) they are not in the next state or 2) they are in the next state\n * but their params have changed (i.e. /users/123 => /users/456).\n *\n * leaveRoutes are ordered starting at the leaf route of the tree\n * we're leaving up to the common parent route. enterRoutes are ordered\n * from the top of the tree we're entering down to the leaf route.\n *\n * changeRoutes are any routes that didn't leave or enter during\n * the transition.\n */\n\n\nfunction computeChangedRoutes(prevState, nextState) {\n  var prevRoutes = prevState && prevState.routes;\n  var nextRoutes = nextState.routes;\n  var leaveRoutes = void 0,\n      changeRoutes = void 0,\n      enterRoutes = void 0;\n\n  if (prevRoutes) {\n    (function () {\n      var parentIsLeaving = false;\n      leaveRoutes = prevRoutes.filter(function (route) {\n        if (parentIsLeaving) {\n          return true;\n        } else {\n          var isLeaving = nextRoutes.indexOf(route) === -1 || routeParamsChanged(route, prevState, nextState);\n          if (isLeaving) parentIsLeaving = true;\n          return isLeaving;\n        }\n      }); // onLeave hooks start at the leaf route.\n\n      leaveRoutes.reverse();\n      enterRoutes = [];\n      changeRoutes = [];\n      nextRoutes.forEach(function (route) {\n        var isNew = prevRoutes.indexOf(route) === -1;\n        var paramsChanged = leaveRoutes.indexOf(route) !== -1;\n        if (isNew || paramsChanged) enterRoutes.push(route);else changeRoutes.push(route);\n      });\n    })();\n  } else {\n    leaveRoutes = [];\n    changeRoutes = [];\n    enterRoutes = nextRoutes;\n  }\n\n  return {\n    leaveRoutes: leaveRoutes,\n    changeRoutes: changeRoutes,\n    enterRoutes: enterRoutes\n  };\n}\n\nexports.default = computeChangedRoutes;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/Users/bytedance/Desktop/outside_workspace/sky_tower_fe/sky_tower_fe/node_modules/react-router/lib/computeChangedRoutes.js"],"names":["exports","__esModule","_PatternUtils","require","routeParamsChanged","route","prevState","nextState","path","paramNames","getParamNames","some","paramName","params","computeChangedRoutes","prevRoutes","routes","nextRoutes","leaveRoutes","changeRoutes","enterRoutes","parentIsLeaving","filter","isLeaving","indexOf","reverse","forEach","isNew","paramsChanged","push","default","module"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAAC,gBAAD,CAA3B;;AAEA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmCC,SAAnC,EAA8CC,SAA9C,EAAyD;AACvD,MAAI,CAACF,KAAK,CAACG,IAAX,EAAiB,OAAO,KAAP;AAEjB,MAAIC,UAAU,GAAG,CAAC,GAAGP,aAAa,CAACQ,aAAlB,EAAiCL,KAAK,CAACG,IAAvC,CAAjB;AAEA,SAAOC,UAAU,CAACE,IAAX,CAAgB,UAAUC,SAAV,EAAqB;AAC1C,WAAON,SAAS,CAACO,MAAV,CAAiBD,SAAjB,MAAgCL,SAAS,CAACM,MAAV,CAAiBD,SAAjB,CAAvC;AACD,GAFM,CAAP;AAGD;AAED;;;;;;;;;;;;;;;AAaA,SAASE,oBAAT,CAA8BR,SAA9B,EAAyCC,SAAzC,EAAoD;AAClD,MAAIQ,UAAU,GAAGT,SAAS,IAAIA,SAAS,CAACU,MAAxC;AACA,MAAIC,UAAU,GAAGV,SAAS,CAACS,MAA3B;AAEA,MAAIE,WAAW,GAAG,KAAK,CAAvB;AAAA,MACIC,YAAY,GAAG,KAAK,CADxB;AAAA,MAEIC,WAAW,GAAG,KAAK,CAFvB;;AAGA,MAAIL,UAAJ,EAAgB;AACd,KAAC,YAAY;AACX,UAAIM,eAAe,GAAG,KAAtB;AACAH,MAAAA,WAAW,GAAGH,UAAU,CAACO,MAAX,CAAkB,UAAUjB,KAAV,EAAiB;AAC/C,YAAIgB,eAAJ,EAAqB;AACnB,iBAAO,IAAP;AACD,SAFD,MAEO;AACL,cAAIE,SAAS,GAAGN,UAAU,CAACO,OAAX,CAAmBnB,KAAnB,MAA8B,CAAC,CAA/B,IAAoCD,kBAAkB,CAACC,KAAD,EAAQC,SAAR,EAAmBC,SAAnB,CAAtE;AACA,cAAIgB,SAAJ,EAAeF,eAAe,GAAG,IAAlB;AACf,iBAAOE,SAAP;AACD;AACF,OARa,CAAd,CAFW,CAYX;;AACAL,MAAAA,WAAW,CAACO,OAAZ;AAEAL,MAAAA,WAAW,GAAG,EAAd;AACAD,MAAAA,YAAY,GAAG,EAAf;AAEAF,MAAAA,UAAU,CAACS,OAAX,CAAmB,UAAUrB,KAAV,EAAiB;AAClC,YAAIsB,KAAK,GAAGZ,UAAU,CAACS,OAAX,CAAmBnB,KAAnB,MAA8B,CAAC,CAA3C;AACA,YAAIuB,aAAa,GAAGV,WAAW,CAACM,OAAZ,CAAoBnB,KAApB,MAA+B,CAAC,CAApD;AAEA,YAAIsB,KAAK,IAAIC,aAAb,EAA4BR,WAAW,CAACS,IAAZ,CAAiBxB,KAAjB,EAA5B,KAAyDc,YAAY,CAACU,IAAb,CAAkBxB,KAAlB;AAC1D,OALD;AAMD,KAxBD;AAyBD,GA1BD,MA0BO;AACLa,IAAAA,WAAW,GAAG,EAAd;AACAC,IAAAA,YAAY,GAAG,EAAf;AACAC,IAAAA,WAAW,GAAGH,UAAd;AACD;;AAED,SAAO;AACLC,IAAAA,WAAW,EAAEA,WADR;AAELC,IAAAA,YAAY,EAAEA,YAFT;AAGLC,IAAAA,WAAW,EAAEA;AAHR,GAAP;AAKD;;AAEDpB,OAAO,CAAC8B,OAAR,GAAkBhB,oBAAlB;AACAiB,MAAM,CAAC/B,OAAP,GAAiBA,OAAO,CAAC,SAAD,CAAxB","sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nvar _PatternUtils = require('./PatternUtils');\n\nfunction routeParamsChanged(route, prevState, nextState) {\n  if (!route.path) return false;\n\n  var paramNames = (0, _PatternUtils.getParamNames)(route.path);\n\n  return paramNames.some(function (paramName) {\n    return prevState.params[paramName] !== nextState.params[paramName];\n  });\n}\n\n/**\n * Returns an object of { leaveRoutes, changeRoutes, enterRoutes } determined by\n * the change from prevState to nextState. We leave routes if either\n * 1) they are not in the next state or 2) they are in the next state\n * but their params have changed (i.e. /users/123 => /users/456).\n *\n * leaveRoutes are ordered starting at the leaf route of the tree\n * we're leaving up to the common parent route. enterRoutes are ordered\n * from the top of the tree we're entering down to the leaf route.\n *\n * changeRoutes are any routes that didn't leave or enter during\n * the transition.\n */\nfunction computeChangedRoutes(prevState, nextState) {\n  var prevRoutes = prevState && prevState.routes;\n  var nextRoutes = nextState.routes;\n\n  var leaveRoutes = void 0,\n      changeRoutes = void 0,\n      enterRoutes = void 0;\n  if (prevRoutes) {\n    (function () {\n      var parentIsLeaving = false;\n      leaveRoutes = prevRoutes.filter(function (route) {\n        if (parentIsLeaving) {\n          return true;\n        } else {\n          var isLeaving = nextRoutes.indexOf(route) === -1 || routeParamsChanged(route, prevState, nextState);\n          if (isLeaving) parentIsLeaving = true;\n          return isLeaving;\n        }\n      });\n\n      // onLeave hooks start at the leaf route.\n      leaveRoutes.reverse();\n\n      enterRoutes = [];\n      changeRoutes = [];\n\n      nextRoutes.forEach(function (route) {\n        var isNew = prevRoutes.indexOf(route) === -1;\n        var paramsChanged = leaveRoutes.indexOf(route) !== -1;\n\n        if (isNew || paramsChanged) enterRoutes.push(route);else changeRoutes.push(route);\n      });\n    })();\n  } else {\n    leaveRoutes = [];\n    changeRoutes = [];\n    enterRoutes = nextRoutes;\n  }\n\n  return {\n    leaveRoutes: leaveRoutes,\n    changeRoutes: changeRoutes,\n    enterRoutes: enterRoutes\n  };\n}\n\nexports.default = computeChangedRoutes;\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}